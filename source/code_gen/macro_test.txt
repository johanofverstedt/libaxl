
//
//  Syntax tree format:
//  node_id: i32 | name: u32 | type: u32, u32 | source_pos: u32, u32
//

def vector_eval(rhs: <expr>, arena* arena) -> [value_type(rhs)] {
	result: [value_type[rhs]] = alloc[value_type[rhs]](arena, length(rhs));

	for(i := 0; i < length(rhs); i = i + 1) {
		result[i] = rhs[i];
	}

	return result;
}

//usage code:
result: [double] = eval(rhs)

macro eval(count: i32, lhs: <var>, rhs: <expr>) {
	yield rhs_len := length(rhs);
	yield len  := min(count, rhs_len);

    lhs =

	for(i: i32 = 0; i < a; i = i + 1) {
		lhs[i] = rhs[i];
	}
}

...
eval(256, vec: [double], )
...

random_access_range > forward_range > forward_stream

input_stream:
//operations:
//deref -> value
//next

def operator_rhs_deref(s: T) -> value_type(T) {
	return rand(s);
}

def operator??(s: T) -> boolean {
	return s.count > 0;
}

def operator++(s: T) {
	++s.first;
	--s.count;
}

forward_stream:
//operations:
//+all of input_stream
//

def operator_lhs_deref(s: T) -> value_type(T)* {
	
}

int*** p;
q:= value_of(p)

//type macros

type_name(x)
type_size(x)
expr_type(a + b)
typedef value_type(x) {
	if(expr_type(*x) == undefined)
		return x;
	return value_type(x);
}

def value_of(x) {
	if(expr_type(*x) == undefined) {
		return x;
	}
	return *x;
}
